[["index.html", "Pathway analysis methods Prefeace", " Pathway analysis methods Siying Huang (E0482362) 2024-01-19 Prefeace knitr::opts_chunk$set(echo = T, comment = &#39;&#39;,message = F, warning = F, error=F) options(width = 100) "],["gene-sets-and-pathways.html", "1 Gene sets and pathways 1.1 Organization of this e-book", " 1 Gene sets and pathways Definition 1.1 (definition name) gene set , biological pathway 1.1 Organization of this e-book I will illustrate the gene pathway analysis using a public dataset for smoking study. Chapter 2 contains information on this study and how to obtain the dataset from NCBI website to an R environment. Chapter 3 quickly illustrate the differential gene expression analysis. This result will be used in some of the parametrical pathway analysis method. Chapter 4 introduce over-representation analysis Chapter 5 introduce the classic gene set enrichment analysis Chapter 6 talks abou the gene set variation analysis Chapter 7 discusses other methods for gene set enrichment analysis Chapter 8 talks about advanced topic regarding gene set analysis "],["study-dataset.html", "2 Study dataset 2.1 Extracting data from NCBI Gene Expression Omnibus databse 2.2 convert to GDS to expression set", " 2 Study dataset In this tutorial, I still use the pulic smoking study dataset from NCBI Gene Expression Omnibus (GEO) database - GDS3713 (GSE18723). 2.1 Extracting data from NCBI Gene Expression Omnibus databse Using GEOquery library to retrieve data from NCBI database. The GDS dataset is stored in the gds R4 class object. library(here) library(GEOquery) library(dplyr) gds &lt;- getGEO(&quot;GDS3713&quot;) # gds@header # meta data of the experiment # gds@dataTable@table # expression data # gds@dataTable@columns # phenotype data structure of the gds object str(gds, max.level = 3) Formal class &#39;GDS&#39; [package &quot;GEOquery&quot;] with 3 slots ..@ gpl :Formal class &#39;GPL&#39; [package &quot;GEOquery&quot;] with 2 slots ..@ dataTable:Formal class &#39;GEODataTable&#39; [package &quot;GEOquery&quot;] with 2 slots ..@ header :List of 23 .. ..$ channel_count : chr &quot;1&quot; .. ..$ dataset_id : chr [1:2] &quot;GDS3713&quot; &quot;GDS3713&quot; .. ..$ description : chr [1:3] &quot;Analysis of peripheral circulating B cells from smoking and non-smoking healthy US white females. B cells are d&quot;| __truncated__ &quot;control&quot; &quot;cigarette smoke&quot; .. ..$ email : chr &quot;geo@ncbi.nlm.nih.gov&quot; .. ..$ feature_count : chr &quot;22283&quot; .. ..$ institute : chr &quot;NCBI NLM NIH&quot; .. ..$ name : chr &quot;Gene Expression Omnibus (GEO)&quot; .. ..$ order : chr &quot;none&quot; .. ..$ platform : chr &quot;GPL96&quot; .. ..$ platform_organism : chr &quot;Homo sapiens&quot; .. ..$ platform_technology_type: chr &quot;in situ oligonucleotide&quot; .. ..$ pubmed_id : chr &quot;20217071&quot; .. ..$ ref : chr &quot;Nucleic Acids Res. 2005 Jan 1;33 Database Issue:D562-6&quot; .. ..$ reference_series : chr &quot;GSE18723&quot; .. ..$ sample_count : chr &quot;79&quot; .. ..$ sample_id : chr [1:2] &quot;GSM464697,GSM464698,GSM464699,GSM464700,GSM464701,GSM464702,GSM464703,GSM464704,GSM464705,GSM464706,GSM464707,G&quot;| __truncated__ &quot;GSM464658,GSM464659,GSM464660,GSM464661,GSM464662,GSM464663,GSM464664,GSM464665,GSM464666,GSM464667,GSM464668,G&quot;| __truncated__ .. ..$ sample_organism : chr &quot;Homo sapiens&quot; .. ..$ sample_type : chr &quot;RNA&quot; .. ..$ title : chr &quot;Smoking effect on B lymphocytes in females&quot; .. ..$ type : chr [1:3] &quot;Expression profiling by array&quot; &quot;stress&quot; &quot;stress&quot; .. ..$ update_date : chr &quot;Jul 11 2010&quot; .. ..$ value_type : chr &quot;count&quot; .. ..$ web_link : chr &quot;http://www.ncbi.nlm.nih.gov/geo&quot; 2.1.1 Summary of the study This study aim to analyze peripheral circulating B cells from smoking and non-smoking healthy US white females. B cells are directly associated with the onset and development of many smoking-induced diseases. Results provide insight into the molecular basis of B cell involvement in smoking-related pathogenesis. It contains 39 smoker and 40 non-smokers. 2.1.2 Assigning the expression and phenotype data The expression data is stored in the gds@dataTable@tabl with gene in The rows and subjects in the columns. The phenotype data is store at gds@dataTable@columns. expr &lt;- Table(gds) summary(expr[, 1:4]) ID_REF IDENTIFIER GSM464697 GSM464698 Length:22283 Length:22283 Min. : 1.53 Min. : 1.06 Class :character Class :character 1st Qu.: 65.44 1st Qu.: 74.40 Mode :character Mode :character Median : 221.78 Median : 243.15 Mean : 859.82 Mean : 752.89 3rd Qu.: 582.95 3rd Qu.: 600.85 Max. :51356.90 Max. :34387.10 pheno &lt;- Columns(gds) summary(pheno) sample stress description Length:79 cigarette smoke:39 Length:79 Class :character control :40 Class :character Mode :character Mode :character 2.2 convert to GDS to expression set Converting the gds object to expression set will generate a series of sub documents, including an annotation file of the genes in the expression data. eset &lt;- GDS2eSet(gds) dim(pData(eset)) # pheno data, data.frame [1] 79 3 str(eset, max.level =4) Formal class &#39;ExpressionSet&#39; [package &quot;Biobase&quot;] with 7 slots ..@ experimentData :Formal class &#39;MIAME&#39; [package &quot;Biobase&quot;] with 13 slots .. .. ..@ name : chr &quot;&quot; .. .. ..@ lab : chr &quot;&quot; .. .. ..@ contact : chr &quot;&quot; .. .. ..@ title : chr &quot;Smoking effect on B lymphocytes in females&quot; .. .. ..@ abstract : chr &quot;Analysis of peripheral circulating B cells from smoking and non-smoking healthy US white females. B cells are d&quot;| __truncated__ .. .. ..@ url : chr &quot;&quot; .. .. ..@ pubMedIds : chr &quot;20217071&quot; .. .. ..@ samples : list() .. .. ..@ hybridizations : list() .. .. ..@ normControls : list() .. .. ..@ preprocessing : list() .. .. ..@ other :List of 23 .. .. ..@ .__classVersion__:Formal class &#39;Versions&#39; [package &quot;Biobase&quot;] with 1 slot ..@ assayData :&lt;environment: 0x2d480628&gt; ..@ phenoData :Formal class &#39;AnnotatedDataFrame&#39; [package &quot;Biobase&quot;] with 4 slots .. .. ..@ varMetadata :&#39;data.frame&#39;: 3 obs. of 1 variable: .. .. ..@ data :&#39;data.frame&#39;: 79 obs. of 3 variables: .. .. ..@ dimLabels : chr [1:2] &quot;sampleNames&quot; &quot;sampleColumns&quot; .. .. ..@ .__classVersion__:Formal class &#39;Versions&#39; [package &quot;Biobase&quot;] with 1 slot ..@ featureData :Formal class &#39;AnnotatedDataFrame&#39; [package &quot;Biobase&quot;] with 4 slots .. .. ..@ varMetadata :&#39;data.frame&#39;: 21 obs. of 2 variables: .. .. ..@ data :&#39;data.frame&#39;: 22283 obs. of 21 variables: .. .. ..@ dimLabels : chr [1:2] &quot;featureNames&quot; &quot;featureColumns&quot; .. .. ..@ .__classVersion__:Formal class &#39;Versions&#39; [package &quot;Biobase&quot;] with 1 slot ..@ annotation : chr(0) ..@ protocolData :Formal class &#39;AnnotatedDataFrame&#39; [package &quot;Biobase&quot;] with 4 slots .. .. ..@ varMetadata :&#39;data.frame&#39;: 0 obs. of 1 variable: .. .. ..@ data :&#39;data.frame&#39;: 79 obs. of 0 variables .. .. ..@ dimLabels : chr [1:2] &quot;sampleNames&quot; &quot;sampleColumns&quot; .. .. ..@ .__classVersion__:Formal class &#39;Versions&#39; [package &quot;Biobase&quot;] with 1 slot ..@ .__classVersion__:Formal class &#39;Versions&#39; [package &quot;Biobase&quot;] with 1 slot .. .. ..@ .Data:List of 4 .. .. ..$ names: chr [1:4] &quot;R&quot; &quot;Biobase&quot; &quot;eSet&quot; &quot;ExpressionSet&quot; # gene annotations annot_cols &lt;- eset@featureData@varMetadata annot_data &lt;- eset@featureData@data "],["differential-gene-expression-analysis-dgea.html", "3 Differential gene expression analysis (DGEA) 3.1 Comparison between smokers and non-smokers 3.2 Results visualization", " 3 Differential gene expression analysis (DGEA) Comparison of differential gene expression patterns in these conditions has enabled the identification of common elements that are significantly enriched in gene classes with particular functions such as protein synthesis, hormone delivery, and morphological plasticity. - Hormones, Brain and Behavior (Third Edition), 2017 Differential expression analysis result is a prerequisite for some of the pathway analysis methods. This chapter does not aim to demonstrate how to properly peform DGEA. Details and explainations of DEGA are omitted. library(here) library(limma) library(dplyr) source(file.path(here(), &quot;src/utils.R&quot;)) expr &lt;- readRDS(file.path(here(), &quot;data/expr.rds&quot;)) pheno &lt;- readRDS(file.path(here(), &quot;data/pheno.rds&quot;)) # data management pheno &lt;- pheno %&gt;% mutate(status = as.factor(as.integer(stress))) 3.1 Comparison between smokers and non-smokers A linear model is used with the constrast made between smokers and controls. In this example, I use limma package and derived test statistics with emperical bayes mderation on the stand errors. y &lt;- as.matrix(expr[, 3:ncol(expr)]) rownames(y) &lt;- expr$IDENTIFIER group &lt;- pheno[[&quot;status&quot;]] mod &lt;- model.matrix(~ 0 + group) fit &lt;- lmFit(y, mod) contr &lt;- makeContrasts( contrasts = &quot;group1-group2&quot;, levels = colnames(coef(fit)) ) tmp &lt;- contrasts.fit(fit, contr) ebfit &lt;- eBayes(tmp, robust = T) rst_eb &lt;- topTable(ebfit, number = Inf) rst &lt;- setNames(rst_eb, c(&quot;ID&quot;, &quot;estimate&quot;, &quot;AveExp&quot;, &quot;t&quot;, &quot;p.value&quot;, &quot;FDR&quot;, &quot;B&quot;)) 3.2 Results visualization The marked genes pass the FDR significant threshold at adjusted p-value &lt;= 0.01. This DEA result will be used for the following pathway analysis. par(mfrow = c(1, 3)) hist(rst_eb$logFC, breaks = 50, main = &#39;log (Fold change)&#39;) hist(rst_eb$P.Value, breaks = 50, main = &#39;P values&#39;) qqplot( -log10(runif(nrow(rst_eb))), -log10(rst_eb$P.Value), xlab = &#39;Theoretical uniform distribution&#39;, ylab = &#39;-log10(P values)&#39; ) qqline(-log10(rst_eb$P.Value), distribution = qunif, col = &quot;red&quot;) volc_plot(rst, lab_col = &quot;ID&quot;, lab_method = &quot;fdr&quot;, fdr_thresh = 0.01) "],["query-bioloical-pathway-databases.html", "4 Query bioloical pathway databases 4.1 Gene annotation 4.2 Convert gene symbol to gene ID using biomaRt. 4.3 Curate biological functions 4.4 Reference", " 4 Query bioloical pathway databases For this practice, we’ll use the result from differential gene expression analysis. 4.1 Gene annotation The GDS3713 dataset comes with an annotation file that has information for genes in the array: cat(paste0(names(annot), collapse = &#39;\\t&#39;)) ID Gene.title Gene.symbol Gene.ID UniGene.title UniGene.symbol UniGene.ID Nucleotide.Title GI GenBank.Accession Platform_CLONEID Platform_ORF Platform_SPOTID Chromosome.location Chromosome.annotation GO.Function GO.Process GO.Component GO.Function.ID GO.Process.ID GO.Component.ID One can directly query a specific gene from this file. For example, we can look up the ICOSLG information. datatable(annot[which(annot$Gene.symbol == &quot;ICOSLG&quot;), ], rownames = F ) However, most of time, we don’t have such a file that comes with the trancriptomic data. We will then need to annotate the genes. 4.2 Convert gene symbol to gene ID using biomaRt. Since many pathway database requires entrez gene IDs as entries and most of sequencing/ microarray output provides gene symbols or ensembl IDs, we’ll need to convert gene symbol to entrez IDs for the pathway analysis. We can query from the ensembl site manually. Or we can do better usingbiomaRtpackage. For a full tutorial of biomaRt package, see here. It covers some more advanced use case. Here I only cover basic usage of this package. 4.2.1 Connect to the selected BioMart database using useEnsembl function. Before connecting to a specific database, we can first check available databases. 4.2.1.1 List of available BioMart databases hosted by Ensembl # available database datatable(listEnsembl()) # available biological species for the gene databases mart &lt;- useEnsembl(&quot;genes&quot;, mirror = &#39;www&#39;) datatable(listDatasets(mart)) Since we want to convert gene symbol to Entrez gene IDs in human subjects, we select biomart = 'genes' and dataset= 'hsapiens_gene_ensembl'. Use useEnsembl function to setup the connection with ensembl site host. # convert from gene symbol to gene ID ensembl &lt;- useEnsembl( biomart = &quot;genes&quot;, dataset = &quot;hsapiens_gene_ensembl&quot;, mirror = &quot;www&quot; ) 4.2.2 Annotate genes Here instead of selecting genes in a biological pathway, I simply randomly choose some genes in the dataset. set.seed(123) gs1 &lt;- sample(rst$ID, 10) gs2 &lt;- sample(rst$ID, 10) Here I choose five most significantly differentially expressed genes, five genes not differentially expressed. gs3 &lt;- c(head(rst$ID, 5), tail(rst$ID, 5)) print(glue::glue(&#39;geneset 1: {paste0(gs1, collapse = &quot;, &quot;)} geneset 2: {paste0(gs2, collapse =&quot;, &quot;)}\\ngeneset 3: {paste0(gs3, collapse =&quot;, &quot;)}&#39;)) geneset 1: HAUS5, MYDGF, TRAPPC13, LINS1, SLC14A1, DYRK3, EIF3I, NRP2, 207479_at, SESN1 geneset 2: ALDH6A1, MAPKAPK5-AS1, WNT7A, GH1, SMYD2, NT5DC2, CCDC30, MTSS1L, CETP, DZIP3 geneset 3: EBP, H3F3AP4, RAB2A, LOC100506248, MFSD11, NAP1L3, C19orf54, ADGRG6, PHF1, BCL2L14 Retreive the annotated file with getBM function. Since we use gene symbols to match aginst gene IDs, we’ll need to specify the type of input data in the filter argument (filters = \"hgnc_symbol\"). We would like to output the hgnc_symbol,entrezgene_id reference. annotgs3 &lt;- getBM( attributes = c(&quot;hgnc_symbol&quot;, &quot;entrezgene_id&quot;), filters = &quot;hgnc_symbol&quot;, values = gs3, mart = ensembl ) print(annotgs3) hgnc_symbol entrezgene_id 1 ADGRG6 57211 2 BCL2L14 79370 3 EBP 10682 4 MFSD11 79157 5 NAP1L3 4675 6 PHF1 5252 7 RAB2A 5862 Note that not all gene symbols can be perfectly match against gene ID. Alternatively, you can annotate all the gene in the dataset then extract the ones in the genesets. For simplicity, I removed duplicated genes of which have multiple probes correspond to the same gene (isoforms). In practice, the removal of these isoforms should be done with examination of coefficient variation (CV). all_genes &lt;- rst$ID[!duplicated(rst$ID)] Upon removal of duplicates, there are 14063 genes left in the dataset. We annotate these genes. annot_all &lt;- getBM( attributes = c(&quot;hgnc_symbol&quot;, &quot;entrezgene_id&quot;), filters = &quot;hgnc_symbol&quot;, values = all_genes, mart = ensembl ) 4.2.3 Alternative methods for annotation Alternatively one can use bitr function from clusterProfiler package. Here we need to specify the database for curation. This requires the pacakge org.Hs.eg.db. If you decide to go with method, make sure to update this package often to obtain the most current information. The org.Hs.eg.db package is updated biannually. bitr(gs1, fromType = &quot;SYMBOL&quot;, toType = c(&quot;ENTREZID&quot;, &quot;SYMBOL&quot;), OrgDb = org.Hs.eg.db ) SYMBOL ENTREZID 1 HAUS5 23354 2 MYDGF 56005 3 TRAPPC13 80006 4 LINS1 55180 5 SLC14A1 6563 6 DYRK3 8444 7 EIF3I 8668 8 NRP2 8828 10 SESN1 27244 4.3 Curate biological functions Upon selection genes of interest, we can start to curate the biological functions of these genes. The most popular databases are GO, KEGG, Reactome, etc. For full understanding the property of each of these databases, see these references [xxx]. For example, I’d like to query the biological functions of genes in the set 3 . One can use the groupGO function to look up biological functions: MF: Molecular Function molecular activities of gene products CC: Cellular Component where gene products are active BP: Biological Process pathways and larger processes made up of the activities of multiple gene products Additionally, one can look up onto KEGG, WikiPathway, Reactome, Diease Ontology (DO), Medical Subject Headings (MeSH), Molecular Signatures Database (MSigDb). I didn’t find any ready to use functions from clusterProfile package,except for GO query. However, personally, I don’t think statiticians are the experts to interpret the finding in biological sense. Since this is less of interest for analysts, the clusterProfiler simplifed this curation process and combined with the tests (ORA, GSEA) in their function construction. ggo &lt;- groupGO( gene = as.character(annotgs3$entrezgene_id), OrgDb = org.Hs.eg.db, ont = &quot;BP&quot;, level = 3, readable = TRUE ) tail(ggo) ID GO:0051410 GO:0051410 GO:0061687 GO:0061687 GO:0071722 GO:0071722 GO:0140330 GO:0140330 GO:1990961 GO:1990961 GO:0031214 GO:0031214 Description Count GO:0051410 detoxification of nitrogen compound 0 GO:0061687 detoxification of inorganic compound 0 GO:0071722 detoxification of arsenic-containing substance 0 GO:0140330 xenobiotic detoxification by transmembrane export across the cell outer membrane 0 GO:1990961 xenobiotic detoxification by transmembrane export across the plasma membrane 0 GO:0031214 biomineral tissue development 0 GeneRatio geneID GO:0051410 0/8 GO:0061687 0/8 GO:0071722 0/8 GO:0140330 0/8 GO:1990961 0/8 GO:0031214 0/8 4.4 Reference "],["over-representation-analysis.html", "5 Over-representation Analysis 5.1 Data prepartion 5.2 Gene set selection 5.3 Over-representation analysis 5.4 Over-respensentation analysis from R package 5.5 Test set up and result interpretations 5.6 Examples 5.7 Pros and Cons of ORA 5.8 Reference", " 5 Over-representation Analysis In this chapter, I will illustrate the principle of overpresentation analysis. There exist a variety of tools with different statistical methods. A few review papers for details: (huangBioinformaticsEnrichmentTools2009?) 5.1 Data prepartion In this micro-array data due to that there are multiple probes match to the same gene. For illustration of the PA purpose I simply removed the duplicated gene probes.In pratice these duplicates should be removed with cautions. rm_idx &lt;- duplicated(rst$ID) rst &lt;- rst[!rm_idx, ] This leaves 14063 genes in the dataset. 5.2 Gene set selection Normally these gene sets should represent major players in biological pathways. This can be achieved through the query from the biological databases or from other analytical approach such as co-expression analysis. For illustration purpose, here I randomly select 10 genes for each gene set. set.seed(123) gs1 &lt;- sample(rst$ID, 10) Here I choose five most significantly differentially expressed genes, five genes not differentially expressed. gs2 &lt;- c(head(rst$ID, 5), tail(rst$ID, 5)) print(glue::glue(&#39;geneset 1: {paste0(gs1, collapse = &quot;, &quot;)} geneset 2: {paste0(gs2, collapse =&quot;, &quot;)}&#39;)) geneset 1: HAUS5, MYDGF, TRAPPC13, LINS1, SLC14A1, DYRK3, EIF3I, NRP2, 207479_at, SESN1 geneset 2: EBP, H3F3AP4, RAB2A, LOC100506248, MFSD11, NAP1L3, C19orf54, ADGRG6, PHF1, BCL2L14 5.2.1 Define differentially expressed gene Here I define differentially expressed genes with following criterion: adjusted p-value &lt; 0.001 log fold change &gt; 5 These threshold criterion are not fixed can be varied depending on the context. Or it can be obtained from other analytical methods. rst &lt;- rst %&gt;% mutate( de = adj.P.Val &lt; 0.001 &amp; abs(logFC) &gt; 5, gs1 = ID %in% gs1, gs2 = ID %in% gs2, ) table(rst[, c(&quot;de&quot;, &quot;gs1&quot;)]) gs1 de FALSE TRUE FALSE 13735 10 TRUE 318 0 table(rst[, c(&quot;de&quot;, &quot;gs2&quot;)]) gs2 de FALSE TRUE FALSE 13740 5 TRUE 313 5 5.3 Over-representation analysis Over-representation analysis (ORA) is used to determine which a priori defined gene sets are more present (over-represented) in a subset of “interesting” genes than what would be expected by chance (huangBioinformaticsEnrichmentTools2009?). The null hypothesis of ORA test: being differentally expressed and belong to a particular pathway (gene set) are independent. Common statistical tests: chi-square test, Fisher’s exact test. Note that when counts in a cell of a contigency table is small, chi-square approximation may not be accurate. The following examples tests the hypothesis for the gene sets described above . Gene set 1 conttab_gs1 &lt;- as.table(table(rst[, c(&quot;gs1&quot;, &quot;de&quot;)])) chisq.test(conttab_gs1) Pearson&#39;s Chi-squared test with Yates&#39; continuity correction data: conttab_gs1 X-squared = 2.3476e-24, df = 1, p-value = 1 fisher.test(conttab_gs1, alternative = &quot;greater&quot;) Fisher&#39;s Exact Test for Count Data data: conttab_gs1 p-value = 1 alternative hypothesis: true odds ratio is greater than 1 95 percent confidence interval: 0 Inf sample estimates: odds ratio 0 Gene set 2 conttab_gs2 &lt;- as.table(table(rst[, c(&quot;gs2&quot;, &quot;de&quot;)])) chisq.test(conttab_gs2) Pearson&#39;s Chi-squared test with Yates&#39; continuity correction data: conttab_gs2 X-squared = 82.706, df = 1, p-value &lt; 2.2e-16 fisher.test(conttab_gs2, alternative = &quot;greater&quot;) Fisher&#39;s Exact Test for Count Data data: conttab_gs2 p-value = 1.316e-06 alternative hypothesis: true odds ratio is greater than 1 95 percent confidence interval: 12.47379 Inf sample estimates: odds ratio 43.83007 5.4 Over-respensentation analysis from R package The advantage of ORA using R packages, most popular one clusterProfile (which is the fusion of a few packages) is that the functions combine the step of database query and the step of testing in one go. The clusterProfile package currently provide following biological database. As shown in the graph, the ORA tests with different db queries are prefixed with enrich, such as enrichGO, enrichDO. Note that these functions are different than the test above. They first query the biological process databases and find the genes lie in the pathway(s). Then it will perform the test to see if the genes in the pathways are differentially expressed compared to the background genes. For example, I’m interested in the top 10 most significantly differentially expressed genes. I would like to query the pathways that these genes involve in then test if these pathways are significantly differentially expressed. gs3 &lt;- head(rst$ID, 10) gs3_ids &lt;- gene_ids[which(gene_ids$hgnc_symbol %in% gs3), &quot;entrezgene_id&quot;] %&gt;% as.character() Gene IDs of geneset 3: 10682, 1316, 79157, 79684, 5862, 6651 Note that not all gene symols can be mapped to the gene IDs In this dataset, we have 12222 non-duplicated gene IDs. 5.5 Test set up and result interpretations Setup parameters: gene: a character vector of gene entrez ID in a gene set to be tested universe: a character vector of gene entrez ID in the background gene set ontology type: biological ontology type. This varies from different reference database. Check specific database for details. reference database: some function requires the input of database. one can either use the connection to online db or download to local. This takes big storage space. Interpretation of results: I use the result from the following GO enrichment analysis for illustration. This applies to the analytical results queried from other databases. From the result object, one can see that the these top genes were mapped onto 94 gene sets (GO terms). Out of these 94 sets, 31 were tested significant. The significance cutoff set up is illustrated in the result object. To interpret the result table, take the examplle of GO term GO:0043186 as an example. This GO term contains 10 genes, out of the 10 genes, only one gene is found in our queried list, which contains 6 genes. So the GeneRatio is 1/6. The pathway. In the background gene set (BgRatio), there are 10 out of 11599 genes. From this we can construct a contingency table below and perform the Fisher test: GO term non-Go term geneset 1 5 background 9 11583 tab &lt;- as.table(matrix(c(1, 9, 5, 11583), ncol = 2)) fisher.test(tab, alternative = &quot;greater&quot;) Fisher&#39;s Exact Test for Count Data data: tab p-value = 0.005163 alternative hypothesis: true odds ratio is greater than 1 95 percent confidence interval: 9.965036 Inf sample estimates: odds ratio 253.8776 5.6 Examples I list the example queries in the mostly used databases. If not specified, all the functions are from the clusterProfile package. 5.6.1 GO Gene Ontology rst_go &lt;- enrichGO(gs3_ids, universe = as.character(gene_ids$entrezgene_id), OrgDb = org.Hs.eg.db, ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, readable = F ) str(rst_go, max.level = 2) Formal class &#39;enrichResult&#39; [package &quot;DOSE&quot;] with 14 slots ..@ result :&#39;data.frame&#39;: 10 obs. of 9 variables: ..@ pvalueCutoff : num 0.05 ..@ pAdjustMethod: chr &quot;BH&quot; ..@ qvalueCutoff : num 0.2 ..@ organism : chr &quot;Homo sapiens&quot; ..@ ontology : chr &quot;CC&quot; ..@ gene : chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; ... ..@ keytype : chr &quot;ENTREZID&quot; ..@ universe : chr [1:11599] &quot;2023&quot; &quot;2026&quot; &quot;2027&quot; &quot;1069&quot; ... ..@ gene2Symbol : chr(0) ..@ geneSets :List of 62 ..@ readable : logi FALSE ..@ termsim : num[0 , 0 ] ..@ method : chr(0) datatable(rst_go@result, rownames = F, options = list(scrollX = &quot;400px&quot;) ) rst_go@geneSets[&quot;GO:0043186&quot;] $&lt;NA&gt; NULL 5.6.2 KEGG Kyoto Encyclopedia of Genes and Genomes I ran into bug from the older version of clusterProfiler. In order to get this function work, update R version and upgrade DOSE package if you use online reference. Alternatively download KEGG reference and set use_internal_data = TRUE. I can’t upgrade R in my local enviroment and don’t have space to download massive data. So I won’t be able to illustrate KEGG here. rst_kegg &lt;- enrichKEGG(gs3_ids, universe = as.character(gene_ids$entrezgene_id), minGSSize = 1, pvalueCutoff = 0.3, organism = &quot;hsa&quot;, use_internal_data = F ) KEGG module rst_mkegg &lt;- enrichMKEGG(gs3_ids, universe = as.character(gene_ids$entrezgene_id), organism = &quot;hsa&quot; ) str(rst_mkegg, max.levels = 1) Formal class &#39;enrichResult&#39; [package &quot;DOSE&quot;] with 14 slots ..@ result :&#39;data.frame&#39;: 1 obs. of 9 variables: .. ..$ ID : chr &quot;M00101&quot; .. ..$ Description: chr &quot;Cholesterol biosynthesis, squalene 2,3-epoxide =&gt; cholesterol&quot; .. ..$ GeneRatio : chr &quot;1/1&quot; .. ..$ BgRatio : chr &quot;10/661&quot; .. ..$ pvalue : num 0.0151 .. ..$ p.adjust : num 0.0151 .. ..$ qvalue : logi NA .. ..$ geneID : chr &quot;10682&quot; .. ..$ Count : int 1 ..@ pvalueCutoff : num 0.05 ..@ pAdjustMethod: chr &quot;BH&quot; ..@ qvalueCutoff : num 0.2 ..@ organism : chr &quot;hsa&quot; ..@ ontology : chr &quot;MKEGG&quot; ..@ gene : chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; ... ..@ keytype : chr &quot;UNKNOWN&quot; ..@ universe : chr [1:661] &quot;3101&quot; &quot;3098&quot; &quot;3099&quot; &quot;80201&quot; ... ..@ gene2Symbol : chr(0) ..@ geneSets :List of 2 .. ..$ M00101: chr [1:10] &quot;4047&quot; &quot;7108&quot; &quot;3930&quot; &quot;6307&quot; ... .. ..$ M00917: chr [1:5] &quot;7108&quot; &quot;10682&quot; &quot;6309&quot; &quot;1717&quot; ... ..@ readable : logi FALSE ..@ termsim : num[0 , 0 ] ..@ method : chr(0) datatable(rst_mkegg@result, rownames = F, options = list(scrollX = &quot;400px&quot;) ) 5.6.3 WikiPathways WikiPathways enrichWP(gs3_ids, organism = &quot;Homo sapiens&quot;, universe = as.character(gene_ids$entrezgene_id) ) # # over-representation test # #...@organism Homo sapiens #...@ontology WikiPathways #...@keytype ENTREZID #...@gene chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; &quot;5862&quot; &quot;6651&quot; #...pvalues adjusted by &#39;BH&#39; with cutoff &lt;0.05 #...6 enriched terms found &#39;data.frame&#39;: 6 obs. of 9 variables: $ ID : chr &quot;WP5193&quot; &quot;WP5064&quot; &quot;WP5333&quot; &quot;WP4545&quot; ... $ Description: chr &quot;Cholesterol synthesis disorders&quot; &quot;7-oxo-C and 7-beta-HC pathways&quot; &quot;Enterocyte cholesterol metabolism&quot; &quot;Oxysterols derived from cholesterol&quot; ... $ GeneRatio : chr &quot;1/3&quot; &quot;1/3&quot; &quot;1/3&quot; &quot;1/3&quot; ... $ BgRatio : chr &quot;17/6386&quot; &quot;22/6386&quot; &quot;33/6386&quot; &quot;38/6386&quot; ... $ pvalue : num 0.00797 0.0103 0.01543 0.01775 0.02007 ... $ p.adjust : num 0.0411 0.0411 0.0411 0.0411 0.0411 ... $ qvalue : num 0.0144 0.0144 0.0144 0.0144 0.0144 ... $ geneID : chr &quot;10682&quot; &quot;10682&quot; &quot;10682&quot; &quot;10682&quot; ... $ Count : int 1 1 1 1 1 1 #...Citation T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141 5.6.4 Reactome Reactome rst_react &lt;- ReactomePA::enrichPathway(gs3_ids, universe = as.character(gene_ids$entrezgene_id), qvalueCutoff = 0.1 ) str(rst_react, max.level = 2) Formal class &#39;enrichResult&#39; [package &quot;DOSE&quot;] with 14 slots ..@ result :&#39;data.frame&#39;: 7 obs. of 9 variables: ..@ pvalueCutoff : num 0.05 ..@ pAdjustMethod: chr &quot;BH&quot; ..@ qvalueCutoff : num 0.1 ..@ organism : chr &quot;human&quot; ..@ ontology : chr &quot;Reactome&quot; ..@ gene : chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; ... ..@ keytype : chr &quot;ENTREZID&quot; ..@ universe : chr [1:7934] &quot;10019&quot; &quot;10112&quot; &quot;10125&quot; &quot;1017&quot; ... ..@ gene2Symbol : chr(0) ..@ geneSets :List of 14 ..@ readable : logi FALSE ..@ termsim : num[0 , 0 ] ..@ method : chr(0) datatable(rst_react@result, rownames = F, options = list(scrollX = &quot;400px&quot;) ) 5.6.5 DO Disease Ontology DOSE::enrichDO(gs3_ids, universe = as.character(gene_ids$entrezgene_id) ) # # over-representation test # #...@organism Homo sapiens #...@ontology DO #...@keytype ENTREZID #...@gene chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; &quot;5862&quot; &quot;6651&quot; #...pvalues adjusted by &#39;BH&#39; with cutoff &lt;0.05 #...0 enriched terms found #...Citation Guangchuang Yu, Li-Gen Wang, Guang-Rong Yan, Qing-Yu He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609 5.6.6 DisGeNET DisGeNET rst_dgn &lt;- DOSE::enrichDGN(gs3_ids, universe = as.character(gene_ids$entrezgene_id), readable = F ) str(rst_dgn, max.level = 2) Formal class &#39;enrichResult&#39; [package &quot;DOSE&quot;] with 14 slots ..@ result :&#39;data.frame&#39;: 315 obs. of 9 variables: ..@ pvalueCutoff : num 0.05 ..@ pAdjustMethod: chr &quot;BH&quot; ..@ qvalueCutoff : num 0.2 ..@ organism : chr &quot;Homo sapiens&quot; ..@ ontology : chr &quot;DisGeNET&quot; ..@ gene : chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; ... ..@ keytype : chr &quot;ENTREZID&quot; ..@ universe : chr [1:11429] &quot;1468&quot; &quot;4210&quot; &quot;54808&quot; &quot;72&quot; ... ..@ gene2Symbol : chr(0) ..@ geneSets :List of 536 ..@ readable : logi FALSE ..@ termsim : num[0 , 0 ] ..@ method : chr(0) datatable(rst_dgn@result, rownames = F, options = list(scrollX = &quot;400px&quot;) ) 5.6.7 MeSH MeSH The enrichement test function requires the feed the reference argument. One can either download the whole reference or connect on online db. The following code will create a local database in the cache directory. The location of the local cache can be found (and updated) with getAnnotationHubCache and setAnnotationHubCache; removeCache removes all cache resources. annot &lt;- AnnotationHub::AnnotationHub(localHub = F) print(annot) # query annotation hub for MeSH database hsa &lt;- AnnotationHub::query(annot, c(&quot;MeSHDb&quot;, &quot;Homo sapiens&quot;)) print(str(hsa)) # download rosources to local cache directory ref_hsa &lt;- hsa[[1]] MeSHDB &lt;- MeSHDbi::MeSHDb(ref_hsa) Otherwise one can install MeSH.Hsa.eg.db package in the local environment. # require installation of `MeSH.Hsa.eg.db` package. # replace `MeSHDb = MeSHDB` if using local reference database. rst_mesh &lt;- meshes::enrichMeSH(gs3_ids, MeSHDb = &quot;MeSH.Hsa.eg.db&quot; ) str(rst_mesh, max.level = 2) Formal class &#39;enrichResult&#39; [package &quot;DOSE&quot;] with 14 slots ..@ result :&#39;data.frame&#39;: 31 obs. of 9 variables: ..@ pvalueCutoff : num 0.05 ..@ pAdjustMethod: chr &quot;BH&quot; ..@ qvalueCutoff : num 0.2 ..@ organism : chr &quot;Human&quot; ..@ ontology : chr &quot;MeSH&quot; ..@ gene : chr [1:6] &quot;10682&quot; &quot;1316&quot; &quot;79157&quot; &quot;79684&quot; ... ..@ keytype : chr &quot;UNKNOWN&quot; ..@ universe : chr [1:16528] &quot;11093&quot; &quot;4867&quot; &quot;5068&quot; &quot;6868&quot; ... ..@ gene2Symbol : chr(0) ..@ geneSets :List of 74 ..@ readable : logi FALSE ..@ termsim : num[0 , 0 ] ..@ method : chr(0) datatable(rst_mesh@result, rownames = F, options = list(scrollX = &quot;400px&quot;) ) # library(RDAVIDWebService) # enrichDAVID(gs3_ids, # universe = as.character(gene_ids$entrezgene_id) # ) 5.7 Pros and Cons of ORA Simple and straitforward can be used for exploratory analysis when there’s no prior hypothesis about any biological mechanism. However, can not infer the directly of differentially expressed pathway e.g. up-regulated or down-regulated. This is not so helpful when particularly interested in the pathways that a drug modulate. does not address the intercorelations of genes. ## Further info Below is an incomplete sumamry of the ORA. datatable(ora, rownames = F, options = list(scrollX = &quot;400px&quot;) ) 5.8 Reference "],["appendix.html", "Appendix 5.9 Biological process data bases 5.10 Summary of currently available pathway analysis methods", " Appendix 5.9 Biological process data bases 5.10 Summary of currently available pathway analysis methods 5.10.1 Over-representation analysis 5.10.2 Gene set enrichment analysis "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
